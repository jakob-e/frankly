//  ·············································································
//  
//  🔩  The Nuts & Bolts
//
//  Out of the box - native Sass functions:
//  http://sass-lang.com/documentation/Sass/Script/Functions.html
//
//  ·············································································

//  TODOs
//  Replace ☠️--angle-to-rad($x) with unit conversion
//  Test and consider if bezier() should stay 
//  Rework unit conversion – add string to number

//  ·············································································
//
//  🔩   Introspection
//
//  ·············································································
//  ▪ boolean
@function is-true($value: null)   { @return $value == true; }
@function is-false($value: null)  { @return $value == false; }
@function is-null($value: null)   { @return $value == null; }
@function is-truthy($value: null) { @return not is-falsy($value); }   
@function is-falsy($value: null)  { @return list-index(false null 0 '', $value); }



//  ▪ type
@function is-bool($value: null)    { @return type-of($value) == bool; }
@function is-number($value: null)  { @return type-of($value) == number; }
@function is-string($value: null)  { @return type-of($value) == string; }
@function is-list($value: null)    { @return type-of($value) == list; }
@function is-map($value: null)     { @return type-of($value) == map; }
@function is-color($value: null)   { @return type-of($value) == color; } 
@function is-arglist($value: null) { @return type-of($value) == arglist; }
@function is-nan($value: null)     { @return not is-number($value); }



//  ▪ unit
@function is-px($value: null) { @return unit-get($value) == px; }
@function is-pt($value: null) { @return unit-get($value) == pt; }
@function is-pc($value: null) { @return unit-get($value) == pc; }
@function is-in($value: null) { @return unit-get($value) == in; }
@function is-mm($value: null) { @return unit-get($value) == mm; }
@function is-cm($value: null) { @return unit-get($value) == cm; }
@function is-q($value: null)  { @return unit-get($value) ==  q; }

@function is-em($value: null)   { @return unit-get($value) ==   em; }
@function is-rem($value: null)  { @return unit-get($value) ==  rem; }
@function is-vw($value: null)   { @return unit-get($value) ==   vw; }
@function is-vw($value: null)   { @return unit-get($value) ==   vh; }
@function is-vmin($value: null) { @return unit-get($value) == vmin; }
@function is-vmax($value: null) { @return unit-get($value) == vmax; }
@function is-pct($value: null)  { @return unit-get($value) ==  '%'; }
@function is-ex($value: null)   { @return unit-get($value) ==   ex; }
@function is-ch($value: null)   { @return unit-get($value) ==   ch; }

@function is-absolute($value: null)  { @return list-index(px pt pc in mm cm q, unit-get($value)); }
@function is-relative($value: null)  { @return list-index(em rem vw vh vmin vmax ex ch '%', unit-get($value)); }
@function is-angle($value: null)     { @return list-index(deg rad turn, unit-get($value)); } 
@function is-time($value: null)      { @return list-index(ms s, unit-get($value)); } 
@function is-frequency($value: null) { @return list-index(hz kHz, unit-get($value)); } 



//  ▪ is-equal
//  compares two values based on value, type and unit
//  (libsass will falsely equal 500 and 500px)
@function is-equal($a, $b) {
    @return 
        type-of($a) == type-of($b) and 
        $a and $b and $a+'' == $b+'' or 
        not $a and not $b;
}



//  ▪ is-empty 
//  empty map, list, arglist or string
@function is-empty($value)  { 
    @return 
        if(list-index(list map arglist, type-of($value)), length($value) == 0, 
        if(list-index(string, type-of($value)), str-length($value) == 0, false));
}



//  ▪ unit-get
//  Similar to unit but returns null in case of not numbers 
@function unit-get($value) {
    @return if(is-number($value), unit($value), null);
}







//  ·············································································
//
//  🔩  List functions
//
//  list($args...)                   => list   
//  list-index($list, $n)            => value      
//
//  nth-get($list, $n)               => value     
//  nth-set($list, $n, $value)       => list
//  nth-delete($list, $n)            => list
//  nth-index($list, $n)             => n  
//
//  first($list)                     => value 
//  last($list)                      => value 
//  last-index($list, $value)        => n
//
//  prepend($list, $value)           => list
//  reverse($list)                   => list
//  unique($list)                    => list
//
//  sort($list, $ascending: true)    => list
//  
//  ·············································································

//  ▪ list 
//  Creates and or reformat a list allowing you to predefine how the 
//  list should be formatted (space/comma separator and bracketed)
//  
//  $list: list()                       creates an empty space separated list without brackets
//  $list: list((), space, false)       empty space separated list without brackets
//  $list: list(foo bar, comma)         comma separated list containing foo and bar
//  
//  if the values list contains formatting this will be used unless a format is provided    
//  $list: list([x, y])                 comma separated bracketed list
//
//  You can also inherit the format of an existing list by passing that list as format.
//  This is useful if you want to make list alterations and have the returned list
//  formatted as the list passed. 
//
//  @function ($list) { 
//     $new-list: (); 
//     ... do stuff 
//     @return list($new-list, $list); 
//  } 
//
@function list($args...) { 
    $a1: nth-get($args, 1);
    $a2: nth-get($args, 2);
    $a3: nth-get($args, 3);
    $list: 
        if(is-list($a1), $a1, 
        if(not list-index(space comma true false, $a1), ($a1), 
        $a1));
    $separator: 
        if(is-list($a2), list-separator($a2), 
        if(list-index(space comma, $a2), $a2, 
        if(list-index(space comma, $a3), $a3, 
        list-separator($list))));
    $bracketed: 
        if(is-list($a2), is-bracketed($a2), 
        if(is-bool($a2), $a2,
        if(is-bool($a3), $a3, 
        is-bracketed($list))));
    @return join((),$list,$separator,$bracketed);
}



//  ▪ nth-get
//  Similar to the native nth function but without 
//  index out of bounds error allowing a more casual
//  use e.g. when handling conditionals
//  
//  @function ($list) {
//     prop-1: nth-get($list, 2) or something-else; 
//     prop-2: nth-get($list, 2);   
//  } 
//  note! null will cause prop-2 not to render 
// 
//  $list: a b c d;
//  nth-get($list,  2)  => b    (2nd item from start)  
//  nth-get($list, -2)  => c    (2nd item from end)
//  nth-get($list, 22)  => null
// 
@function nth-get($list, $n) { 
    $n: nth-index($list, $n);
    @return if(length($list) < $n, null, nth($list, $n));
}



//  ▪ nth-set
//  Similar to the native set-nth function but without 
//  index out of bounds error instead returning the  
//  original list if no nth match without inserting.
//
//  $list: a b c d;
//  nth-set($list,  2, 👻)  => a 👻 c d   
//  nth-set($list, -2, 👻)  => a b 👻 d    
//  nth-get($list, 22, 👻)  => a b c d e
// 
@function nth-set($list, $n, $value) { 
    $n: nth-index($list, $n);
    @return if(length($list) < $n, $list, set-nth($list, $n, $value));
}



//  ▪ nth-delete
//  Deletes a value from a list based on index. like nth-get and 
//  nth-set passing a negative index will delete from the back
//  of the list. 
@function nth-delete($list, $n) {
    $result: ();
    $n: nth-index($list, $n);
    @for $i from 1 through length($list) {
        @if $i != $n { $result: append($result, nth($list, $i)); }
    }
    @return list($result, $list);
}



//  ▪ nth-index
//  Helper function to calculate index from the back of a list
//  if a negative n value is passed. Error handling in case of
//  an out of bounds index is ignored and to be handled by the
//  calling function or mixin.
@function nth-index($list, $n) {
    @return if($n < 0, length($list) + $n + 1, $n);
}



//  ▪ first
//  Shorthand function to return the first item in a list.
@function first($list) {
    @return nth-get($list, 1);
}



//  ▪ last
//  Shorthand function to return the last item in a list.
@function last($list) {
    @return nth-get($list, -1);
}



//  ▪ list-index
//  Similar to the native index function but with an is-equal check
//  to ensure unit annd unitless are not treated equal
@function list-index($list, $value) {
    @if length($list) == 0 { @return null; }
    @for $n from 1 through length($list) { 
        @if is-equal(nth-get($list, $n), $value) { @return $n }; 
    }
    @return null;
}



//  ▪ first-index
//  Same as list-index 
@function first-index($list, $value) {
    @return list-index($list, $value);
}



//  ▪ last-index
//  Similar to the native index function but returning the 
//  last found index of a matched value.
@function last-index($list, $value) {
    @if length($list) == 0 { @return null; }
    @for $n from length($list) through 1  { 
        @if is-equal(nth($list, $n), $value) { @return $n }; 
    }
    @return null;
}



//  ▪ prepend
//  Similar to append but adds the value to the beginning of a list.
@function prepend($list, $value) {
    @return list(append((), $value), $list);
}



//  ▪ reverse
//  Reverses a list. 
@function reverse($list) {
    $result: ();
    @for $i from length($list) through 1 {
        $result: append($result, nth($list, $i));
    }
    @return list($result, $list);
}



//  ▪ unique
//  Removes duplicate items in a list.
//  $list: a b a b c d c e;  =>   a b c d e    
@function unique($list) { 
    $result: ();
    @for $i from 1 through length($list) {
        $value: nth-get($list, $i);
        @if not list-index($result, $value) { 
            $result: append($result, $value); 
        }
    }
    @return list($result, $list);
}



//  ▪ sort
//  sorts a list containing numbers (including comparable units)
//  by default the sort order is ascending
@function sort($list, $ascending: true) { 
    $result: ();
    @while length($list) > 0 {
        $min: min($list...);
        $n: list-index($list, $min);
        $list: nth-delete($list, $n);
        $result: append($result, $min);
    }
    @return list(if($ascending, $result, reverse($result)), $list);
}







//  ·············································································
//
//  🔩  String functions
//
//  str-replace($string, $search, $replace: '')    => string
//  str-split($string, $delimiter)                 => list
//  str-join($list, $delimiter)                    => string
//   
//
//
//  
//  ·············································································
//  ▪ str-replace
//  replaces a part of a string with a new replace value. if no replace
//  value is provided matches will be replaced with '' – hence deleted. 
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if(index,
        str-slice($string, 1, $index - 1) + $replace + 
        str-replace(str-slice($string, $index + str-length($search)), $search, $replace),
        $string);
}



//  ·············································································
//
//  🔩 Map functions
//
//  ·············································································
//  ▪ map
//  Returns a map based on passed maps and or keywords
//  to ensure correct casting we create a dummy map and 
//  empty it before merging on maps and keywords
@function map($args...) {
    $map: map-remove((🔑: 💾), 🔑);
    @each $arg in $args { @if is-map($arg) { $map: map-merge($map, $arg); } }
    @return map-merge($map, keywords($args));
}



//  ▪ map-some
//  Returns the map value if the key matches one of the keys in a
//  map using lists as keys (e.g. wken providing aliases)
//  $map:(
//     extra-large xl: 24px,
//     large lg l: 18px
//     ...
//  ) 
//  map-some($map, l) =>  18px
//
@function map-some($map, $key) {
    @each $keys in map-keys($map) { @if list-index($keys, $key) { @return map-get($map, $keys); } } 
    @return null;
}





//  ·············································································
//
//  🔩  Color functions
//
//  ·············································································





//  ·············································································
//  
//  🔩  Number/Math functions
//
//  round-to($number, $decimals) => number
//  ciel-to($number, $decimals)  => number
//  floor-to($number, $decimals) => number
//  log($number)                 => number
//  log10($number)               => number
//  pow($number, $exponent)      => number
//  sqrt($number)                => number
//  nth-root($number, $exponent) => number
//  sin($number)                 => number
//  cos($number)                 => number
//  tan($number)                 => number
//  asin($number)                => number
//  acos($number)                => number
//  atan($number)                => number
//  atan2($number, $number)      => number
//
//  bezier()
//
//  https://github.com/xi/sass-planifolia/blob/master/sass/math.scss
//
//  ·············································································
//  ▪ steps of the taylor expansion
$☠️--math-steps: 32 !default;



//  ▪ constants
$E      : 2.71828182845904523536; //  eulers constant
$PI     : 3.14159265358979323846; //  pi 
$TAU    : $PI * 2;                //  tau (2π)
$PHI    : 1.61803398874989484820; //  phi 
$SQRT2  : 1.41421356237309504880; //  square root 2
$LN2    : 0.6931471805599453;     //  natural logarithm of 2 
$LN10   : 2.302585092994046;      //  natural logarithm of 10

//  aliases
$LOG2   : $LN2;
$LOG10  : $LN10;
$e      : $E;     
$pi     : $PI;
$phi    : $PHI;
$tau    : $TAU;
$ln2    : $LN2;
$log2   : $LN2;
$ln10   : $LN10;
$log10  : $LN10;
$π      : $PI;     
$τ      : $TAU; 
$Τ      : $TAU; 
$φ      : $PHI;    
$Φ      : $PHI;    
$ϕ      : $PHI;    



//  ▪ decimals
//  Returns the number of decimals (provided by Sass)
//  TODO - include force decimals if possible
@function decimals($value){
    $decimal: str-index(#{num($value)},'.');
    @return if($decimal, str-length(#{num($value)}) - $decimal, 0);
}


//  ▪ round-to
//  Similar to the native round function but 
//  allows to set number of decimals
@function round-to($value, $decimals: null) {
    @return if($decimals, round($value * pow(10, $decimals))/pow(10, $decimals), round($value));
}



//  ▪ ciel-to
//  Similar to the native ciel function but 
//  allows to set number of decimals
@function ciel-to($value, $decimals: null) {
    @return if($decimals, ciel($value * pow(10, $decimals))/pow(10, $decimals), ciel($value));
}



//  ▪ floor-to
//  Similar to the native floor function but 
//  allows to set number of decimals
@function floor-to($value, $decimals: null) {
    @return if($decimals, floor($value * pow(10, $decimals))/pow(10, $decimals), floor($value));
}




//  ▪ log
//  @param {number} $x
@function log($x, $steps: $☠️--math-steps) {
    $approx: ☠️--log10-approx($x);
    // $y is in range [1, 10]
    $y: $x / ☠️--pow-int(10, $approx);
    @return $approx * $log10 + ☠️--log-taylor-1($y, $steps);
}



//  ▪ log10
//  @param {number} $x
@function log10($x, $steps: $☠️--math-steps) {
    @return log($x, $steps) / $log10;
}



//  ▪ pow
//  @param {number} $x
//  @param {number} $exponent
//    If $x is 0 or below, $exponent needs to be an integer.
@function pow($x, $exponent, $steps: $☠️--math-steps) {
    $exp1: round($exponent);
    $exp2: $exponent - $exp1;
    $pow1: ☠️--pow-int($x, $exp1);
    @if $exp2 == 0 { @return $pow1; } 
    @else if $x == 0 and $exponent > 0 { @return 0; } 
    @else {
        $y: log($x, $steps) * $exp2;
        $pow2: ☠️--exp-taylor-0($y, $steps);
        @return $pow1 * $pow2;
    }
}



//  ▪ nth-root
//  @param {number} $x
//  @param {number} $exponent
@function nth-root($x, $exponent, $steps: $☠️--math-steps) {
    @return pow($x, 1 / $exponent, $steps);
}



//  ▪ sqrt
//  @param {number} $x
@function sqrt($x, $steps: $☠️--math-steps) {
    @return nth-root($x, 2, $steps);
}



//  ▪ sin
//  @param {number} $x
@function sin($x, $steps: $☠️--math-steps) {
    $x: ☠️--angle-to-rad($x);
    @if $x > $τ { $x: $x % $τ; }
    @if $x > $π { @return -1 * sin($x - $π); } 
    @else if $x < 0 { @return -1 * sin(-$x); } 
    @else { @return ☠️--sin-taylor-0($x, $steps); }
}



//  ▪ cos
@function cos($x, $steps: $☠️--math-steps) {
    $x: ☠️--angle-to-rad($x);
    @return sin($x + $π / 2, $steps);
}



//  ▪ tan
@function tan($x, $steps: $☠️--math-steps) {
    @return sin($x, $steps) / cos($x, $steps);
}



//  ▪ asin
@function asin($x, $steps: $☠️--math-steps) {
    @if $x < 0 { @return -1 * asin(-$x, $steps); } 
    @else if $x * $x > .5 { @return acos(sqrt(1 - $x * $x, $steps), $steps); } 
    @else { @return ☠️--asin-taylor-0($x, $steps); }
}



//  ▪ acos
@function acos($x, $steps: $☠️--math-steps) {
    @return $π / 2 - asin($x, $steps);
}



//  ▪ atan
@function atan($x, $steps: $☠️--math-steps) {
    @if $x == 0 { @return 0; } 
    @else if $x < 0 { @return -1 * atan(-$x, $steps); } 
    @else { @return asin(1 / sqrt(1 + 1 / ($x * $x), $steps), $steps); }
}



//  ▪ atan2
//  Computes the angle of the vector (x,y) with the x axis.
//  @param {number} $y
//  @param {number} $x
@function atan2($y, $x, $steps: $☠️--math-steps) {
    @if $x > 0 { @return atan($y / $x, $steps); } 
    @else if $x < 0 {
        @if $y >= 0 { @return atan($y / $x, $steps) + $π; } 
        @else { @return atan($y / $x, $steps) - $π; }
    } @else {
        @if $y > 0 { @return $π / 2; } 
        @else if $y < 0 { @return $π / -2; } 
        @else { @return 0; }
    }
}



//  ▪ bezier
//  Generic bezier interpolation.
//  @param {P[]} $points
//  @param {number} $t position 0 .. 1
//  @param {function(P, P, number) => P} $interpolate [$☠️--interpolate]
//    The default is a linear interpolation between lists of numbers.
//    You can specify a custom interpolation function, e.g. to interpolate
//    between colors.
//  @return {P} A single point.
@function bezier($points, $t, $interpolate: ☠️--interpolate) {
    @if length($points) > 1 {
        $tmp: ();
        @for $i from 1 to length($points) {
            $point1: nth($points, $i);
            $point2: nth($points, $i + 1);
            $tmp: append($tmp, call($interpolate, $point1, $point2, $t));
        }
        @return bezier($tmp, $t, $interpolate);
    } 
    @else { @return nth($points, 1); }
}



//  ▪ math helper functions
@function ☠️--angle-to-rad($x) { @return (0rad + $x) / 1rad; }

@function ☠️--exp-taylor-0($x, $steps) {
    $item: 1;
    $result: 1;
    @for $i from 1 to $steps {
        $item: $item * $x / $i;
        $result: $result + $item;
    }
    @return $result;
}

@function ☠️--log-taylor-1($x, $steps) {
    $z: ($x - 1) / ($x + 1);
    $power: $z;
    $result: $z;
    @for $i from 1 to $steps {
        $power: $power * $z * $z;
        $result: $result + $power / (2 * $i + 1);
    }
    @return 2 * $result;
}

@function ☠️--sin-taylor-0($x, $steps) {
    $item: $x;
    $result: $x;
    @for $i from 1 to $steps {
        $item: -$item * $x * $x / (2 * $i) / (2 * $i + 1);
        $result: $result + $item;
    }
    @return $result;
}

@function ☠️--asin-taylor-0($x, $steps) {
    $item: $x;
    $result: $x;
    @for $i from 1 to $steps {
        $item: $item * $x * $x * (2 * $i - 1) / (2 * $i);
        $result: $result + $item / (2 * $i + 1);
    }
    @return $result;
}

@function ☠️--pow-int($base, $exponent) {
    @if $exponent < 0 { @return 1 / ☠️--pow-int($base, -$exponent); } 
    @else if $exponent == 0 { @return 1; } 
    @else if $exponent == 1 { @return $base; } 
    @else {
        $exp: floor($exponent / 2);
        $pow: ☠️--pow-int($base, $exp);
        @if $exp * 2 == $exponent { @return $pow * $pow; } 
        @else { @return $pow * $pow * $base; }
    }
}

@function ☠️--log10-approx($x) {
    @if $x <= 0 { @error 'cannot calculate log of #{$x}'; } 
    // choose the smaller option (-1) because it yields better
    // results in log().
    @else if $x >= 1 { @return str-length(inspect(round($x))) - 1; } 
    @else { @return -1 * str-length(inspect(round(1 / $x))); }
}


@function ☠️--interpolate($a, $b, $t) {
    $result: ();
    @for $i from 1 through length($a) {
        $value: nth($a, $i) * (1 - $t) + nth($b, $i) * $t;
        $result: append($result, $value);
    }
    @return $result;
}



//  ·············································································
//  
//  🔩  Unit conversion 
//
//   Function               Input units
//
//   Absolute length
//   px(input);             px, pt, pc, in, mm, cm, em, rem, q, number
//   pt(input);             px, pt, pc, in, mm, cm, em, rem, q, number
//   pc(input);             px, pt, pc, in, mm, cm, em, rem, q, number
//   in(input);             px, pt, pc, in, mm, cm, em, rem, q, number
//   mm(input);             px, pt, pc, in, mm, cm, em, rem, q, number
//   cm(input);             px, pt, pc, in, mm, cm, em, rem, q, number
//   q(input);              px, pt, pc, in, mm, cm, em, rem, q, number
//
//   Relative length
//   em(input);             px, pt, pc, in, mm, cm, q, em, rem, number
//   rem(input);            px, pt, pc, in, mm, cm, q, em, rem, number
//   ex(input);             ex, number
//   ch(input);             ch, number
//   vw(input);             vw, number
//   vh(input);             vh, number
//   vmin(input);           vmin, number
//   vmax(input);           vmax, number
//
//   Angle
//   deg(input);            deg, rad, grad, turn, number
//   rad(input);            deg, rad, grad, turn, number
//   grad(input);           deg, rad, grad, turn, number
//   turn(input);           deg, rad, grad, turn, number
//
//   Resolution
//   dpi(input);            dpi, dpcm, dppx, number
//   dpcm(input);           dpi, dpcm, dppx, number
//   dppx(input);           dpi, dpcm, dppx, number
//
//   Time
//   s(input);              s, ms, number
//   ms(input);             s, ms, number
//
//   Frequency
//   hz(input);             hz, khz, number
//   khz(input);            hz, khz, number
//
//   String
//   str(input);            anything not null
//
//   Number, int and uint
//   num(input);            px, pt, pc, in, mm, cm, q, em, rem, ex, ch,
//                          vw, vh, vmin, vmax, deg, rad, grad, turn,
//                          dpi, dpcm, dppx, s, ms, hz, khz, number
//   int(input);            as number
//   uint(input);           as number
//
//   ratio                  number to fraction
//
//   Aliases
//   string(input);
//   number(input);
//
//  ·············································································

// ▪Base font size in pixel for converting em and rem to absolute lengths.
$root-font-size: 16px !default;
$base-font-size: $root-font-size !default;



// ▪ Absolute lengths
@function px($input) { @return to-unit(px, $input); }
@function pt($input) { @return to-unit(pt, $input); }
@function pc($input) { @return to-unit(pc, $input); }
@function in($input) { @return to-unit(in, $input); }
@function mm($input) { @return to-unit(mm, $input); }
@function cm($input) { @return to-unit(cm, $input); }
@function q($input)  { @return to-unit(q, $input); }



// ▪ Angles
@function deg($input){ @return to-unit(deg, $input); }
@function rad($input){ @return to-unit(rad, $input); }
@function grad($input){ @return to-unit(grad, $input); }
@function turn($input){ @return to-unit(turn, $input); }



// ▪ Resolution
@function dpi($input) { @return to-unit(dpi, $input); }
@function dpcm($input){ @return to-unit(dpcm, $input); }
@function dppx($input){ @return to-unit(dppx, $input); }



// ▪ Time
@function ms($input){ @return to-unit(ms, $input); }
@function s($input) { @return to-unit(s, $input); }



// ▪ Frequencies
@function hz($input){ @return to-unit(hz, $input);}
@function khz($input){ @return to-unit(khz, $input); }



// ▪ Relative lengths
@function em($input...){
    $em: to-unit(em, nth($input,1));
    // Adjust for compounds (visual size)
    @if length($input) > 1 {
        @for $i from 2 through length($input){
            $em: $em / num(em(nth($input,$i)));
        }
    }
    @return $em;
}
@function rem($input){ @return to-unit(rem, $input); }



// ▪ Inconvertible relative lengths – depends on font
@function ex($input){ @return to-unit(ex, $input); }
@function ch($input){ @return to-unit(ch, $input); }



// ▪ Viewport
@function vw($input)  { @return to-unit(vw, $input); }
@function vh($input)  { @return to-unit(vh, $input); }
@function vmin($input){ @return to-unit(vmin, $input); }
@function vmax($input){ @return to-unit(vmax, $input); }



// ▪ Strings and numbers
@function str($input){ @return #{$input};  }
@function num($input){
    @if type-of($input) != number {
        @error 'Could not convert `#{$input}` - must be `type-of number`';
        @return null;
    }
    @return $input / ($input * 0 + 1);
}
@function int($input){
    $num: num($input);
    @return if($num < 0, ceil($num), floor($num));
}
@function uint($input){ @return abs(int($input)); }



// ▪ Aliases
@function string($input){ @return str($input);}
@function number($input){ @return num($input);}



// ▪ to-unit
// Conversion function
@function to-unit($unit, $input){
    // Test against valid CSS units
    $to-unit: map-get((
        px: 0px, pt: 0pt, pc: 0pc, in: 0in, mm: 0mm, cm: 0cm, q: 0q, // absolute length
        em: 0em, rem: 0rem, ch: 0ch, ex: 0ex,                        // relative length - font based
        vw: 0vw, vh: 0vh, vmin: 0vmin, vmax: 0vmax,                  // relative length - viewport based
        deg: 0deg, turn: 0turn, grad: 0grad, rad: 0rad,              // angle
        s: 0s, ms: 0ms,                                              // time
        hz: 0Hz, khz: 0kHz,                                          // frequency
        dpi: 0dpi, dpcm: 0dpcm, dppx: 0dppx,                         // resolution
        pct: 0%, percent: 0%, num: 0, number: 0                      // percent or number
    ), $unit);

    // Error handling – wrong $unit
    // Incomparable units are caught in convertion
    @if not $to-unit {
        @error 'Could not convert to `#{$unit}` – must be a valid CSS unit';
        @return null;
    }

    // Number/incomparable conversion
    @if index(num number ex ch vw vh vmin vmax, $unit) {
        $value: num($input);
    }

    // EM convertion using px as base
    @if index(em, unit($input)) {
        $input: 0px + num($input) * $base-font-size/1px;
    }
    @if index(em, $unit) and not unitless($input) {
        $input: 0px + px($input);
        $input: num($input) * 1px / $base-font-size;
    }

    // REM convertion using px as base
    @if index(rem, unit($input)) {
        $input: 0px + num($input) * $root-font-size/1px;
    }
    @if index(rem, $unit) and not unitless($input) {
        $input: 0px + $input;
        $input: num($input) * 1px / $root-font-size;
    }

    // Bug fix – resolution units seems to be flipped
    @if index(dpi dpcm dppx, $unit){
        $units: (dppx: 0dppx, dpcm: 0dpcm, dpi: 0dpi);
        $input-unit: map-get($units, unit($input));
        $input: if(1dppx < 95dpi,num($input-unit + (num($input) + $to-unit)),$input);
    }

    //  Bug fix – LibSass does not natively convert q  
    @if index(q, unit($input)) {
        $input: num($input) * 1/40 * 1cm;    
    } 

    // Convert
    @return $to-unit + $input;
}


//  ▪ ratio
//  Convert number to ratio (fraction)
//  ratio(1.7777778) =>   16/9
@function ratio($x, $y: null){
    @if not $y {
        $n: $x; $y: 1;
        @while $y < 10 {
            $x:  $n * 10 - ((10 - $y) * $n);
            @if $x == round($x){ @return #{$x}/#{$y}; }
            @else { $y: $y + 1; }
        }
        $x: round($n * 1000000); $y: 1000000;
        @while $x % 10 == 0 { $x: $x/10; $y: $y/10; }
        @while $x % 5 == 0 { $x: $x/5; $y: $y/5; }
        @while $x % 2 == 0 { $x: $x/2; $y: $y/2; }
        @return #{$x}/#{$y};
    }
    @else if $x == round($x) and $y == round($y){ @return #{$x}/#{$y}; }
    @warn 'X and Y must be integers'; @return false;
}




