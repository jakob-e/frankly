//  ·············································································
//
//    ✅  Unit tests
//
//  ·············································································
@import '_frankly.scss';



//  ·············································································
//  Introspection
//  ·············································································
//  ▪ boolean
@include test {
    @include test('Boolean Introspection');
    @include test('\a  is-true');    
    @include test(is-true, true,  true);    
    @include test(is-true, false, false);
    @include test(is-true, false, null);
    @include test(is-true, false, 0);
    @include test(is-true, false, string);  
    @include test(is-true, false, '');    
	@include test(is-true, false, list());              
    @include test(is-true, false, list(a)); 
    @include test(is-true, false, list(a b));      
    @include test(is-true, false, map());         
    @include test(is-true, false, map($a:b));   
	@include test(is-true, false, #000);            
    @include test(is-true, false, #fff);

    @include test('\a  is-false');        
    @include test(is-false, false, true);    
    @include test(is-false, true,  false);
    @include test(is-false, false, null);
    @include test(is-false, false, 0);
    @include test(is-false, false, string);  
    @include test(is-false, false, '');    
	@include test(is-false, false, list());        
    @include test(is-false, false, list(a));  
    @include test(is-false, false, list(a b));      
	@include test(is-false, false, map());          
    @include test(is-false, false, map($a:b)); 
    @include test(is-false, false, #000);           
    @include test(is-false, false, #fff);        

    @include test('\a  is-null');        
    @include test(is-null, false, true);    
    @include test(is-null, false, false);
    @include test(is-null, true,  null);
    @include test(is-null, false, 0);
    @include test(is-null, false, string);  
    @include test(is-null, false, '');    
    @include test(is-null, false, list());         
    @include test(is-null, false, list(a));
    @include test(is-null, false, list(a b));      
    @include test(is-null, false, map());          
    @include test(is-null, false, map($a:b)); 
	@include test(is-null, false, #000);     
	@include test(is-null, false, #fff);     

    @include test('\a is-truthy');        
    @include test(is-truthy, true,  true);    
    @include test(is-truthy, false, false);
    @include test(is-truthy, false, null);
    @include test(is-truthy, false, 0);
    @include test(is-truthy, true,  string);
    @include test(is-truthy, false, '');    
	@include test(is-truthy, true,  list());
    @include test(is-truthy, true,  list(a));  
    @include test(is-truthy, true,  list(a b));      
    @include test(is-truthy, true,  map());          
    @include test(is-truthy, true,  map($a:b));  
	@include test(is-truthy, true,  #000);    
	@include test(is-truthy, true,  #fff);    	

    @include test('\a  is-falsy');        
    @include test(is-falsy, false, true);    
    @include test(is-falsy, true,  false);
    @include test(is-falsy, true,  null);
    @include test(is-falsy, true,  0);
    @include test(is-falsy, false, string);
    @include test(is-falsy, true,  '');    
	@include test(is-falsy, false, list());             
	@include test(is-falsy, false, list(a));       
    @include test(is-falsy, false, list(a b));      
    @include test(is-falsy, false, map());
    @include test(is-falsy, false, map($a:b));  
	@include test(is-falsy, false, #000);    
	@include test(is-falsy, false, #fff);    	
	
	              
    
}




/*


//  ▪ type
@function is-bool($value)    { @return type-of($value) == bool; }
@function is-number($value)  { @return type-of($value) == number; }
@function is-string($value)  { @return type-of($value) == string; }
@function is-list($value)    { @return type-of($value) == list; }
@function is-map($value)     { @return type-of($value) == map; }
@function is-color($value)   { @return type-of($value) == color; } 
@function is-arglist($value) { @return type-of($value) == arglist; }
@function is-nan($value)     { @return not is-number($value); }



//  ▪ unit
@function is-px($value) { @return unit-get($value) == px; }
@function is-pt($value) { @return unit-get($value) == pt; }
@function is-pc($value) { @return unit-get($value) == pc; }
@function is-in($value) { @return unit-get($value) == in; }
@function is-mm($value) { @return unit-get($value) == mm; }
@function is-cm($value) { @return unit-get($value) == cm; }
@function is-q($value)  { @return unit-get($value) ==  q; }

@function is-em($value)   { @return unit-get($value) ==   em; }
@function is-rem($value)  { @return unit-get($value) ==  rem; }
@function is-vw($value)   { @return unit-get($value) ==   vw; }
@function is-vw($value)   { @return unit-get($value) ==   vh; }
@function is-vmin($value) { @return unit-get($value) == vmin; }
@function is-vmax($value) { @return unit-get($value) == vmax; }
@function is-pct($value)  { @return unit-get($value) ==  '%'; }
@function is-ex($value)   { @return unit-get($value) ==   ex; }
@function is-ch($value)   { @return unit-get($value) ==   ch; }

@function is-absolute($value)  { @return list-index(px pt pc in mm cm q, unit-get($value)); }
@function is-relative($value)  { @return list-index(em rem vw vh vmin vmax ex ch '%', unit-get($value)); }
@function is-angle($value)     { @return list-index(deg rad turn, unit-get($value)); } 
@function is-time($value)      { @return list-index(ms s, unit-get($value)); } 
@function is-frequency($value) { @return list-index(hz kHz, unit-get($value)); } 

*/
